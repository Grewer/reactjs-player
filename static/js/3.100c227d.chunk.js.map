{"version":3,"sources":["components/Interface/index.js"],"names":["Interface","React","memo","getPlayer","src","useState","isPlayingResult","setIsPlayingResult","getDurationResult","setGetDurationResult","getCurrentTimeResult","setGetCurrentTimeResult","setCurrentTimeResult","setSetCurrentTimeResult","getBufferedResult","setGetBufferedResult","getVolumeResult","setGetVolumeResult","setVolumeResult","setSetVolumeResult","isMutedResult","setIsMutedResult","toggleMuteResult","setToggleMuteResult","setPlaybackRateResult","setSetPlaybackRateResult","getPlaybackRateResult","setGetPlaybackRateResult","isFullscreenResult","setIsFullscreenResult","isPiPResult","setIsPiPResult","onIsPlayingClick","useCallback","player","isPlaying","toString","onGetDurationClick","getDuration","onGetCurrentTimeClick","getCurrentTime","onSetCurrentTimeClick","duration","setCurrentTime","onGetBufferedClick","buffered","getBuffered","start","length","end","onGetVolumeClick","getVolume","onSetVolumeClick","v","setVolume","onIsMutedClick","isMuted","onToggleMuteClick","toggleMute","onGetPlaybackRateClick","getPlaybackRate","onSetPlaybackRateClick","rate","setPlaybackRate","onIsPiPClick","isPiP","onIsFullscreenClick","isFullscreen","useEffect","className","onClick","type","defaultProps"],"mappings":"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","file":"static/js/3.100c227d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'antd';\nimport './index.css';\n\nconst Interface = React.memo(({ getPlayer, src }) => {\n  // 接口测试\n  const [isPlayingResult, setIsPlayingResult] = React.useState('--');\n  const [getDurationResult, setGetDurationResult] = React.useState('--');\n  const [getCurrentTimeResult, setGetCurrentTimeResult] = React.useState('--');\n  const [setCurrentTimeResult, setSetCurrentTimeResult] = React.useState('--');\n  const [getBufferedResult, setGetBufferedResult] = React.useState('--');\n  const [getVolumeResult, setGetVolumeResult] = React.useState('--');\n  const [setVolumeResult, setSetVolumeResult] = React.useState('--');\n  const [isMutedResult, setIsMutedResult] = React.useState('--');\n  const [toggleMuteResult, setToggleMuteResult] = React.useState('--');\n  const [setPlaybackRateResult, setSetPlaybackRateResult] = React.useState('--');\n  const [getPlaybackRateResult, setGetPlaybackRateResult] = React.useState('--');\n  const [isFullscreenResult, setIsFullscreenResult] = React.useState('--');\n  const [isPiPResult, setIsPiPResult] = React.useState('--');\n\n  // isPlaying\n  const onIsPlayingClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setIsPlayingResult(player.isPlaying().toString());\n    } else {\n      setIsPlayingResult('--');\n    }\n  }, [getPlayer]);\n\n  // getDuration\n  const onGetDurationClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setGetDurationResult(player.getDuration().toString());\n    } else {\n      setGetDurationResult('--');\n    }\n  }, [getPlayer]);\n\n  // getCurrentTime\n  const onGetCurrentTimeClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setGetCurrentTimeResult(player.getCurrentTime().toString());\n    } else {\n      setGetCurrentTimeResult('--');\n    }\n  }, [getPlayer]);\n\n  // setCurrentTime\n  const onSetCurrentTimeClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      const duration = player.getDuration();\n      if (0 < duration) {\n        player.setCurrentTime(duration / 2);\n        setSetCurrentTimeResult('true');\n      } else {\n        setSetCurrentTimeResult('false');\n      }\n    } else {\n      setSetCurrentTimeResult('--');\n    }\n  }, [getPlayer]);\n\n  // getBuffered\n  const onGetBufferedClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      const buffered = player.getBuffered();\n      if (buffered) {\n        setGetBufferedResult(`${buffered.start(buffered.length - 1)}-${buffered.end(buffered.length - 1)}`);\n      } else {\n        setGetBufferedResult('null');\n      }\n    } else {\n      setGetBufferedResult('--');\n    }\n  }, [getPlayer]);\n\n  // getVolume\n  const onGetVolumeClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setGetVolumeResult(player.getVolume().toString());\n    } else {\n      setGetVolumeResult('--');\n    }\n  }, [getPlayer]);\n\n  // setVolume\n  const onSetVolumeClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      const v = 1 === player.getVolume() ? 0.5 : 1;\n      player.setVolume(v);\n      setSetVolumeResult('true');\n    } else {\n      setSetVolumeResult('--');\n    }\n  }, [getPlayer]);\n\n  // isMuted\n  const onIsMutedClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setIsMutedResult(player.isMuted().toString());\n    } else {\n      setIsMutedResult('--');\n    }\n  }, [getPlayer]);\n\n  // toggleMute\n  const onToggleMuteClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      player.toggleMute();\n      setToggleMuteResult('true');\n    } else {\n      setToggleMuteResult('--');\n    }\n  }, [getPlayer]);\n\n  // getPlaybackRate\n  const onGetPlaybackRateClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setGetPlaybackRateResult(player.getPlaybackRate().toString());\n    } else {\n      setGetPlaybackRateResult('--');\n    }\n  }, [getPlayer]);\n\n  // setPlaybackRate\n  const onSetPlaybackRateClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      const rate = 1 === player.getPlaybackRate() ? 1.25 : 1;\n      player.setPlaybackRate(rate);\n      setSetPlaybackRateResult('true');\n    } else {\n      setSetPlaybackRateResult('--');\n    }\n  }, [getPlayer]);\n\n  const onIsPiPClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setIsPiPResult(player.isPiP().toString());\n    } else {\n      setIsPiPResult('--');\n    }\n  }, [getPlayer]);\n\n  const onIsFullscreenClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setIsFullscreenResult(player.isFullscreen().toString());\n    } else {\n      setIsFullscreenResult('--');\n    }\n  }, [getPlayer]);\n\n  React.useEffect(() => {\n    setIsPlayingResult('--');\n    setGetDurationResult('--');\n    setGetCurrentTimeResult('--');\n    setSetCurrentTimeResult('--');\n    setGetBufferedResult('--');\n    setGetVolumeResult('--');\n    setSetVolumeResult('--');\n    setIsMutedResult('--');\n    setToggleMuteResult('--');\n    setSetPlaybackRateResult('--');\n    setGetPlaybackRateResult('--');\n    setIsFullscreenResult('--');\n    setIsPiPResult('--');\n  }, [src]);\n\n  return (\n    <table className=\"testTable\">\n      <thead>\n        <tr>\n          <th className=\"methodNameTitle\">接口</th>\n          <th className=\"testActionTitle\">运行</th>\n          <th>结果</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>isPlaying</td>\n          <td className=\"testAction\" onClick={onIsPlayingClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{isPlayingResult}</td>\n        </tr>\n        <tr>\n          <td>getDuration</td>\n          <td className=\"testAction\" onClick={onGetDurationClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{getDurationResult}</td>\n        </tr>\n        <tr>\n          <td>getCurrentTime</td>\n          <td className=\"testAction\" onClick={onGetCurrentTimeClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{getCurrentTimeResult}</td>\n        </tr>\n        <tr>\n          <td>setCurrentTime</td>\n          <td className=\"testAction\" onClick={onSetCurrentTimeClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{setCurrentTimeResult}</td>\n        </tr>\n        <tr>\n          <td>getBuffered</td>\n          <td className=\"testAction\" onClick={onGetBufferedClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{getBufferedResult}</td>\n        </tr>\n        <tr>\n          <td>getVolume</td>\n          <td className=\"testAction\" onClick={onGetVolumeClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{getVolumeResult}</td>\n        </tr>\n        <tr>\n          <td>setVolume</td>\n          <td className=\"testAction\" onClick={onSetVolumeClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{setVolumeResult}</td>\n        </tr>\n        <tr>\n          <td>isMuted</td>\n          <td className=\"testAction\" onClick={onIsMutedClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{isMutedResult}</td>\n        </tr>\n        <tr>\n          <td>toggleMute</td>\n          <td className=\"testAction\" onClick={onToggleMuteClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{toggleMuteResult}</td>\n        </tr>\n        <tr>\n          <td>getPlaybackRate</td>\n          <td className=\"testAction\" onClick={onGetPlaybackRateClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{getPlaybackRateResult}</td>\n        </tr>\n        <tr>\n          <td>setPlaybackRate</td>\n          <td className=\"testAction\" onClick={onSetPlaybackRateClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{setPlaybackRateResult}</td>\n        </tr>\n        <tr>\n          <td>isPiP</td>\n          <td className=\"testAction\" onClick={onIsPiPClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{isPiPResult}</td>\n        </tr>\n        <tr>\n          <td>isFullscreen</td>\n          <td className=\"testAction\" onClick={onIsFullscreenClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{isFullscreenResult}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n});\n\nInterface.propTypes = {\n  getPlayer: PropTypes.func.isRequired,\n  src: PropTypes.string,\n};\n\nInterface.defaultProps = {\n  src: '',\n};\n\nexport default Interface;\n"],"sourceRoot":""}