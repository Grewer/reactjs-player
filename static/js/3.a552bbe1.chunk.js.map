{"version":3,"sources":["components/Interface/index.js"],"names":["Interface","React","memo","_ref","getPlayer","src","_React$useState","useState","_React$useState2","Object","D_github_react_player_example_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","isPlayingResult","setIsPlayingResult","_React$useState3","_React$useState4","getDurationResult","setGetDurationResult","_React$useState5","_React$useState6","getCurrentTimeResult","setGetCurrentTimeResult","_React$useState7","_React$useState8","setCurrentTimeResult","setSetCurrentTimeResult","_React$useState9","_React$useState10","getBufferedResult","setGetBufferedResult","_React$useState11","_React$useState12","getVolumeResult","setGetVolumeResult","_React$useState13","_React$useState14","setVolumeResult","setSetVolumeResult","_React$useState15","_React$useState16","isMutedResult","setIsMutedResult","_React$useState17","_React$useState18","toggleMuteResult","setToggleMuteResult","_React$useState19","_React$useState20","setPlaybackRateResult","setSetPlaybackRateResult","_React$useState21","_React$useState22","getPlaybackRateResult","setGetPlaybackRateResult","_React$useState23","_React$useState24","isFullscreenResult","setIsFullscreenResult","_React$useState25","_React$useState26","isPiPResult","setIsPiPResult","onIsPlayingClick","useCallback","player","isPlaying","toString","onGetDurationClick","getDuration","onGetCurrentTimeClick","getCurrentTime","onSetCurrentTimeClick","duration","setCurrentTime","onGetBufferedClick","buffered","getBuffered","concat","start","length","end","onGetVolumeClick","getVolume","onSetVolumeClick","v","setVolume","onIsMutedClick","isMuted","onToggleMuteClick","toggleMute","onGetPlaybackRateClick","getPlaybackRate","onSetPlaybackRateClick","rate","setPlaybackRate","onIsPiPClick","isPiP","onIsFullscreenClick","isFullscreen","useEffect","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","className","onClick","antd_es_icon__WEBPACK_IMPORTED_MODULE_1__","type","defaultProps"],"mappings":"6IAKMA,UAAYC,IAAMC,KAAK,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,UAAWC,EAAUF,EAAVE,IAAUC,EAELL,IAAMM,SAAS,MAFVC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAE5CK,EAF4CH,EAAA,GAE3BI,EAF2BJ,EAAA,GAAAK,EAGDZ,IAAMM,SAAS,MAHdO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAG5CE,EAH4CD,EAAA,GAGzBE,EAHyBF,EAAA,GAAAG,EAIKhB,IAAMM,SAAS,MAJpBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAI5CE,EAJ4CD,EAAA,GAItBE,EAJsBF,EAAA,GAAAG,EAKKpB,IAAMM,SAAS,MALpBe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAK5CE,EAL4CD,EAAA,GAKtBE,EALsBF,EAAA,GAAAG,EAMDxB,IAAMM,SAAS,MANdmB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAM5CE,EAN4CD,EAAA,GAMzBE,EANyBF,EAAA,GAAAG,EAOL5B,IAAMM,SAAS,MAPVuB,EAAArB,OAAAC,EAAA,EAAAD,CAAAoB,EAAA,GAO5CE,EAP4CD,EAAA,GAO3BE,EAP2BF,EAAA,GAAAG,EAQLhC,IAAMM,SAAS,MARV2B,EAAAzB,OAAAC,EAAA,EAAAD,CAAAwB,EAAA,GAQ5CE,EAR4CD,EAAA,GAQ3BE,EAR2BF,EAAA,GAAAG,EASTpC,IAAMM,SAAS,MATN+B,EAAA7B,OAAAC,EAAA,EAAAD,CAAA4B,EAAA,GAS5CE,EAT4CD,EAAA,GAS7BE,EAT6BF,EAAA,GAAAG,EAUHxC,IAAMM,SAAS,MAVZmC,EAAAjC,OAAAC,EAAA,EAAAD,CAAAgC,EAAA,GAU5CE,EAV4CD,EAAA,GAU1BE,EAV0BF,EAAA,GAAAG,EAWO5C,IAAMM,SAAS,MAXtBuC,EAAArC,OAAAC,EAAA,EAAAD,CAAAoC,EAAA,GAW5CE,EAX4CD,EAAA,GAWrBE,EAXqBF,EAAA,GAAAG,EAYOhD,IAAMM,SAAS,MAZtB2C,EAAAzC,OAAAC,EAAA,EAAAD,CAAAwC,EAAA,GAY5CE,EAZ4CD,EAAA,GAYrBE,EAZqBF,EAAA,GAAAG,EAaCpD,IAAMM,SAAS,MAbhB+C,EAAA7C,OAAAC,EAAA,EAAAD,CAAA4C,EAAA,GAa5CE,EAb4CD,EAAA,GAaxBE,EAbwBF,EAAA,GAAAG,GAcbxD,IAAMM,SAAS,MAdFmD,GAAAjD,OAAAC,EAAA,EAAAD,CAAAgD,GAAA,GAc5CE,GAd4CD,GAAA,GAc/BE,GAd+BF,GAAA,GAiB7CG,GAAmB5D,IAAM6D,YAAY,WACzC,IAAMC,EAAS3D,IAEbQ,EADEmD,EACiBA,EAAOC,YAAYC,WAEnB,OAEpB,CAAC7D,IAGE8D,GAAqBjE,IAAM6D,YAAY,WAC3C,IAAMC,EAAS3D,IAEbY,EADE+C,EACmBA,EAAOI,cAAcF,WAErB,OAEtB,CAAC7D,IAGEgE,GAAwBnE,IAAM6D,YAAY,WAC9C,IAAMC,EAAS3D,IAEbgB,EADE2C,EACsBA,EAAOM,iBAAiBJ,WAExB,OAEzB,CAAC7D,IAGEkE,GAAwBrE,IAAM6D,YAAY,WAC9C,IAAMC,EAAS3D,IACf,GAAI2D,EAAQ,CACV,IAAMQ,EAAWR,EAAOI,cACpB,EAAII,GACNR,EAAOS,eAAeD,EAAW,GACjC/C,EAAwB,SAExBA,EAAwB,cAG1BA,EAAwB,OAEzB,CAACpB,IAGEqE,GAAqBxE,IAAM6D,YAAY,WAC3C,IAAMC,EAAS3D,IACf,GAAI2D,EAAQ,CACV,IAAMW,EAAWX,EAAOY,cAEtB/C,EADE8C,EACkB,GAAAE,OAAIF,EAASG,MAAMH,EAASI,OAAS,GAArC,KAAAF,OAA2CF,EAASK,IAAIL,EAASI,OAAS,IAEzE,aAGvBlD,EAAqB,OAEtB,CAACxB,IAGE4E,GAAmB/E,IAAM6D,YAAY,WACzC,IAAMC,EAAS3D,IAEb4B,EADE+B,EACiBA,EAAOkB,YAAYhB,WAEnB,OAEpB,CAAC7D,IAGE8E,GAAmBjF,IAAM6D,YAAY,WACzC,IAAMC,EAAS3D,IACf,GAAI2D,EAAQ,CACV,IAAMoB,EAAI,IAAMpB,EAAOkB,YAAc,GAAM,EAC3ClB,EAAOqB,UAAUD,GACjB/C,EAAmB,aAEnBA,EAAmB,OAEpB,CAAChC,IAGEiF,GAAiBpF,IAAM6D,YAAY,WACvC,IAAMC,EAAS3D,IAEboC,EADEuB,EACeA,EAAOuB,UAAUrB,WAEjB,OAElB,CAAC7D,IAGEmF,GAAoBtF,IAAM6D,YAAY,WAC1C,IAAMC,EAAS3D,IACX2D,GACFA,EAAOyB,aACP5C,EAAoB,SAEpBA,EAAoB,OAErB,CAACxC,IAGEqF,GAAyBxF,IAAM6D,YAAY,WAC/C,IAAMC,EAAS3D,IAEbgD,EADEW,EACuBA,EAAO2B,kBAAkBzB,WAEzB,OAE1B,CAAC7D,IAGEuF,GAAyB1F,IAAM6D,YAAY,WAC/C,IAAMC,EAAS3D,IACf,GAAI2D,EAAQ,CACV,IAAM6B,EAAO,IAAM7B,EAAO2B,kBAAoB,KAAO,EACrD3B,EAAO8B,gBAAgBD,GACvB5C,EAAyB,aAEzBA,EAAyB,OAE1B,CAAC5C,IAEE0F,GAAe7F,IAAM6D,YAAY,WACrC,IAAMC,EAAS3D,IAEbwD,GADEG,EACaA,EAAOgC,QAAQ9B,WAEf,OAEhB,CAAC7D,IAEE4F,GAAsB/F,IAAM6D,YAAY,WAC5C,IAAMC,EAAS3D,IAEboD,EADEO,EACoBA,EAAOkC,eAAehC,WAEtB,OAEvB,CAAC7D,IAkBJ,OAhBAH,IAAMiG,UAAU,WACdtF,EAAmB,MACnBI,EAAqB,MACrBI,EAAwB,MACxBI,EAAwB,MACxBI,EAAqB,MACrBI,EAAmB,MACnBI,EAAmB,MACnBI,EAAiB,MACjBI,EAAoB,MACpBI,EAAyB,MACzBI,EAAyB,MACzBI,EAAsB,MACtBI,GAAe,OACd,CAACvD,IAGF8F,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBACAH,EAAAC,EAAAC,cAAA,4BAGJF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,QAAS1C,IAClCsC,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,KAAK,iBAEbN,EAAAC,EAAAC,cAAA,UAAK1F,IAEPwF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,QAASrC,IAClCiC,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,KAAK,iBAEbN,EAAAC,EAAAC,cAAA,UAAKtF,IAEPoF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,QAASnC,IAClC+B,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,KAAK,iBAEbN,EAAAC,EAAAC,cAAA,UAAKlF,IAEPgF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,QAASjC,IAClC6B,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,KAAK,iBAEbN,EAAAC,EAAAC,cAAA,UAAK9E,IAEP4E,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,QAAS9B,IAClC0B,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,KAAK,iBAEbN,EAAAC,EAAAC,cAAA,UAAK1E,IAEPwE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,QAASvB,IAClCmB,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,KAAK,iBAEbN,EAAAC,EAAAC,cAAA,UAAKtE,IAEPoE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,QAASrB,IAClCiB,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,KAAK,iBAEbN,EAAAC,EAAAC,cAAA,UAAKlE,IAEPgE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,QAASlB,IAClCc,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,KAAK,iBAEbN,EAAAC,EAAAC,cAAA,UAAK9D,IAEP4D,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,QAAShB,IAClCY,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,KAAK,iBAEbN,EAAAC,EAAAC,cAAA,UAAK1D,IAEPwD,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,QAASd,IAClCU,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,KAAK,iBAEbN,EAAAC,EAAAC,cAAA,UAAKlD,IAEPgD,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,QAASZ,IAClCQ,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,KAAK,iBAEbN,EAAAC,EAAAC,cAAA,UAAKtD,IAEPoD,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,QAAST,IAClCK,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,KAAK,iBAEbN,EAAAC,EAAAC,cAAA,UAAK1C,KAEPwC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,QAASP,IAClCG,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,KAAK,iBAEbN,EAAAC,EAAAC,cAAA,UAAK9C,SAYfvD,EAAU0G,aAAe,CACvBrG,IAAK,IAGQL","file":"static/js/3.a552bbe1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'antd';\nimport './index.css';\n\nconst Interface = React.memo(({ getPlayer, src }) => {\n  // 接口测试\n  const [isPlayingResult, setIsPlayingResult] = React.useState('--');\n  const [getDurationResult, setGetDurationResult] = React.useState('--');\n  const [getCurrentTimeResult, setGetCurrentTimeResult] = React.useState('--');\n  const [setCurrentTimeResult, setSetCurrentTimeResult] = React.useState('--');\n  const [getBufferedResult, setGetBufferedResult] = React.useState('--');\n  const [getVolumeResult, setGetVolumeResult] = React.useState('--');\n  const [setVolumeResult, setSetVolumeResult] = React.useState('--');\n  const [isMutedResult, setIsMutedResult] = React.useState('--');\n  const [toggleMuteResult, setToggleMuteResult] = React.useState('--');\n  const [setPlaybackRateResult, setSetPlaybackRateResult] = React.useState('--');\n  const [getPlaybackRateResult, setGetPlaybackRateResult] = React.useState('--');\n  const [isFullscreenResult, setIsFullscreenResult] = React.useState('--');\n  const [isPiPResult, setIsPiPResult] = React.useState('--');\n\n  // isPlaying\n  const onIsPlayingClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setIsPlayingResult(player.isPlaying().toString());\n    } else {\n      setIsPlayingResult('--');\n    }\n  }, [getPlayer]);\n\n  // getDuration\n  const onGetDurationClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setGetDurationResult(player.getDuration().toString());\n    } else {\n      setGetDurationResult('--');\n    }\n  }, [getPlayer]);\n\n  // getCurrentTime\n  const onGetCurrentTimeClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setGetCurrentTimeResult(player.getCurrentTime().toString());\n    } else {\n      setGetCurrentTimeResult('--');\n    }\n  }, [getPlayer]);\n\n  // setCurrentTime\n  const onSetCurrentTimeClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      const duration = player.getDuration();\n      if (0 < duration) {\n        player.setCurrentTime(duration / 2);\n        setSetCurrentTimeResult('true');\n      } else {\n        setSetCurrentTimeResult('false');\n      }\n    } else {\n      setSetCurrentTimeResult('--');\n    }\n  }, [getPlayer]);\n\n  // getBuffered\n  const onGetBufferedClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      const buffered = player.getBuffered();\n      if (buffered) {\n        setGetBufferedResult(`${buffered.start(buffered.length - 1)}-${buffered.end(buffered.length - 1)}`);\n      } else {\n        setGetBufferedResult('null');\n      }\n    } else {\n      setGetBufferedResult('--');\n    }\n  }, [getPlayer]);\n\n  // getVolume\n  const onGetVolumeClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setGetVolumeResult(player.getVolume().toString());\n    } else {\n      setGetVolumeResult('--');\n    }\n  }, [getPlayer]);\n\n  // setVolume\n  const onSetVolumeClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      const v = 1 === player.getVolume() ? 0.5 : 1;\n      player.setVolume(v);\n      setSetVolumeResult('true');\n    } else {\n      setSetVolumeResult('--');\n    }\n  }, [getPlayer]);\n\n  // isMuted\n  const onIsMutedClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setIsMutedResult(player.isMuted().toString());\n    } else {\n      setIsMutedResult('--');\n    }\n  }, [getPlayer]);\n\n  // toggleMute\n  const onToggleMuteClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      player.toggleMute();\n      setToggleMuteResult('true');\n    } else {\n      setToggleMuteResult('--');\n    }\n  }, [getPlayer]);\n\n  // getPlaybackRate\n  const onGetPlaybackRateClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setGetPlaybackRateResult(player.getPlaybackRate().toString());\n    } else {\n      setGetPlaybackRateResult('--');\n    }\n  }, [getPlayer]);\n\n  // setPlaybackRate\n  const onSetPlaybackRateClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      const rate = 1 === player.getPlaybackRate() ? 1.25 : 1;\n      player.setPlaybackRate(rate);\n      setSetPlaybackRateResult('true');\n    } else {\n      setSetPlaybackRateResult('--');\n    }\n  }, [getPlayer]);\n\n  const onIsPiPClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setIsPiPResult(player.isPiP().toString());\n    } else {\n      setIsPiPResult('--');\n    }\n  }, [getPlayer]);\n\n  const onIsFullscreenClick = React.useCallback(() => {\n    const player = getPlayer();\n    if (player) {\n      setIsFullscreenResult(player.isFullscreen().toString());\n    } else {\n      setIsFullscreenResult('--');\n    }\n  }, [getPlayer]);\n\n  React.useEffect(() => {\n    setIsPlayingResult('--');\n    setGetDurationResult('--');\n    setGetCurrentTimeResult('--');\n    setSetCurrentTimeResult('--');\n    setGetBufferedResult('--');\n    setGetVolumeResult('--');\n    setSetVolumeResult('--');\n    setIsMutedResult('--');\n    setToggleMuteResult('--');\n    setSetPlaybackRateResult('--');\n    setGetPlaybackRateResult('--');\n    setIsFullscreenResult('--');\n    setIsPiPResult('--');\n  }, [src]);\n\n  return (\n    <table className=\"testTable\">\n      <thead>\n        <tr>\n          <th className=\"methodNameTitle\">接口</th>\n          <th className=\"testActionTitle\">运行</th>\n          <th>结果</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>isPlaying</td>\n          <td className=\"testAction\" onClick={onIsPlayingClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{isPlayingResult}</td>\n        </tr>\n        <tr>\n          <td>getDuration</td>\n          <td className=\"testAction\" onClick={onGetDurationClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{getDurationResult}</td>\n        </tr>\n        <tr>\n          <td>getCurrentTime</td>\n          <td className=\"testAction\" onClick={onGetCurrentTimeClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{getCurrentTimeResult}</td>\n        </tr>\n        <tr>\n          <td>setCurrentTime</td>\n          <td className=\"testAction\" onClick={onSetCurrentTimeClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{setCurrentTimeResult}</td>\n        </tr>\n        <tr>\n          <td>getBuffered</td>\n          <td className=\"testAction\" onClick={onGetBufferedClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{getBufferedResult}</td>\n        </tr>\n        <tr>\n          <td>getVolume</td>\n          <td className=\"testAction\" onClick={onGetVolumeClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{getVolumeResult}</td>\n        </tr>\n        <tr>\n          <td>setVolume</td>\n          <td className=\"testAction\" onClick={onSetVolumeClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{setVolumeResult}</td>\n        </tr>\n        <tr>\n          <td>isMuted</td>\n          <td className=\"testAction\" onClick={onIsMutedClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{isMutedResult}</td>\n        </tr>\n        <tr>\n          <td>toggleMute</td>\n          <td className=\"testAction\" onClick={onToggleMuteClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{toggleMuteResult}</td>\n        </tr>\n        <tr>\n          <td>getPlaybackRate</td>\n          <td className=\"testAction\" onClick={onGetPlaybackRateClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{getPlaybackRateResult}</td>\n        </tr>\n        <tr>\n          <td>setPlaybackRate</td>\n          <td className=\"testAction\" onClick={onSetPlaybackRateClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{setPlaybackRateResult}</td>\n        </tr>\n        <tr>\n          <td>isPiP</td>\n          <td className=\"testAction\" onClick={onIsPiPClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{isPiPResult}</td>\n        </tr>\n        <tr>\n          <td>isFullscreen</td>\n          <td className=\"testAction\" onClick={onIsFullscreenClick}>\n            <Icon type=\"play-circle\" />\n          </td>\n          <td>{isFullscreenResult}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n});\n\nInterface.propTypes = {\n  getPlayer: PropTypes.func.isRequired,\n  src: PropTypes.string,\n};\n\nInterface.defaultProps = {\n  src: '',\n};\n\nexport default Interface;\n"],"sourceRoot":""}